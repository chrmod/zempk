<div id="mainChart" style="min-width: 310px; height: 400px; margin: 0 auto"></div>

{{>breadcrumbs}}

<script type="text/javascript">

    var _data = null;
    var _yr = 0, _cp = [], _future = [], _interest = 0.05;

var fetchFigo = function () {

    $.ajax("/figo", {
        "success": function (data) {
            _data = data;
            var fakeMonthlyIncome = function (year, startMonth, endMonth, amount) {
                for (var month = startMonth; month <= endMonth; month++) {
                    var thisAmount = amount * Math.random() - 0.3;
                    _data.current_balance += amount;
                    if (month < 10) {
                        _data.transactions.push({"date":year + "-0" + month + "-01T00:00:00.000Z", "amount": amount});
                    } else {
                        _data.transactions.push({"date":year + "-" + month + "-01T00:00:00.000Z", "amount": amount});
                    }
                }
            }

            fakeMonthlyIncome(2012, 1, 12, 1300);
            fakeMonthlyIncome(2013, 1, 12, 200);
            fakeMonthlyIncome(2014, 1, 12, 1900);
            fakeMonthlyIncome(2015, 1, 5, 2000);
            crunchData();
            renderChart();
        }
    });
};

var projectFuture = function (year, lastTS, balance, _chartPoints) {
    var incompleteYear = true;
    var yearEnd = new Date(year, 11, 31, 23, 59, 59);
    while (balance < 1000000) {
        var roi = balance * _interest;
        var savings;
        if (incompleteYear) {
            var daysLeft = (yearEnd.getTime() - lastTS) / 1000 /3600 / 24;
            savings = (_yr * daysLeft / 365)  + roi;
            incompleteYear = false;
        } else {
            savings = _yr + roi;
        }
        balance += savings;
        if (_chartPoints) {
            _chartPoints.push([
                new Date(year++, 11, 31, 23, 59, 59).getTime(), Math.round(balance / 10) / 100]);
        }
    }

    return {
        "balance": balance,
        "year": year
    };

}

var crunchData = function() {

    var balance = _data.current_balance;
    var firstDate = null, lastDate = null;

    _cp = [];
    for (var i in _data.transactions) {
        if (_data.transactions.hasOwnProperty(i)) {
            var d = _data.transactions[i];
            var date = new Date(d.date);
            _cp.push([date, d.amount]);
        }
    }


    _cp.sort(function (t1, t2) {
        return t1[0] - t2[0];
    });

    for (var i = _cp.length - 1; i >= 0; i--) {
        balance -= _cp[i][1];
        _cp[i][1] = Math.round(balance / 10) / 100;
        _cp[i][0] = _cp[i][0].getTime();
    }

    // Calculate the date range for the whole data set
    var firstTS = _cp[0][0], lastTS = _cp[_cp.length - 1][0];
    var firstBalance = _cp[0][1], lastBalance = _cp[_cp.length - 1][1];

    var duration = (lastTS - firstTS) / (1000 * 3600 * 24 * 365);
    _yr = (lastBalance - firstBalance) /  duration * 1000;

    // Calculate net worth and other parameters for future projection
    _future = [];
    balance = _data.current_balance;
    _future.push(_cp[_cp.length - 1]);

    var year = new Date(lastTS).getFullYear();

    var out = projectFuture(year, lastTS, balance, _future);

};

var renderChart = function() {
    $('#mainChart').highcharts({
        chart: {
            type: 'spline'
        },
        xAxis: {
            type: 'datetime'
        },
        yAxis: {
            title: {
                text: 'K€'
            },
            plotLines: []
        },
        tooltip: {
            headerFormat: '<b>{series.name}</b><br>',
            pointFormat: '{point.x:%m.%Y}: {point.y:.2f} k€'
        },
        series: [{
                name: 'Cash',
                data: _cp
            }, {
                name: 'Future',
                data: _future
            }]
        }
    );
};

$(function() {
    fetchFigo();
});

</script>